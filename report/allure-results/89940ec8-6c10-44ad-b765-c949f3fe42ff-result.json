{"name": "test_login[data0]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = eval('Button(\"预约会议\").exists()')", "trace": "self = <test_cases.test_login.TestLogin object at 0x000000000C808DC8>\ndata = {'case_status': True, 'expected_result': 'Button(\"预约会议\").exists()', 'name': '所有参数正确，登陆成功', 'params': {'capture': None, 'name': 'test1', 'pwd': '123zxc'}}\nopen_close_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"463217a6b7da89eb0642e037e3fade2b\")>\n\n    @allure.story('登录页面验证')\n    @pytest.mark.parametrize('data', login_data)\n    def test_login(self, data, open_close_browser):\n        allure.dynamic.description(data['name'])\n        driver = open_close_browser\n        driver.get(admin_host)\n        captcha_url = f\"{admin_host}/ztone/captcha/send\"\n        write(data['params']['name'], into='请输入账号')\n        write(data['params']['pwd'], into='请输入密码')\n        if data['params']['capture'] == None:\n            captcha_code = get_captcha_code(get_response(driver, captcha_url)['captchaToken'])\n        else:\n            captcha_code = data['params']['capture']\n        write(captcha_code, into='请输入验证码')\n        press(ENTER)\n        time.sleep(1)\n        try:\n            assert eval(data['expected_result'])\n        except AssertionError as e:\n            screenshoot(driver, f'{data[\"name\"]}')\n>           raise e\n\ntest_cases\\test_login.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_cases.test_login.TestLogin object at 0x000000000C808DC8>\ndata = {'case_status': True, 'expected_result': 'Button(\"预约会议\").exists()', 'name': '所有参数正确，登陆成功', 'params': {'capture': None, 'name': 'test1', 'pwd': '123zxc'}}\nopen_close_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"463217a6b7da89eb0642e037e3fade2b\")>\n\n    @allure.story('登录页面验证')\n    @pytest.mark.parametrize('data', login_data)\n    def test_login(self, data, open_close_browser):\n        allure.dynamic.description(data['name'])\n        driver = open_close_browser\n        driver.get(admin_host)\n        captcha_url = f\"{admin_host}/ztone/captcha/send\"\n        write(data['params']['name'], into='请输入账号')\n        write(data['params']['pwd'], into='请输入密码')\n        if data['params']['capture'] == None:\n            captcha_code = get_captcha_code(get_response(driver, captcha_url)['captchaToken'])\n        else:\n            captcha_code = data['params']['capture']\n        write(captcha_code, into='请输入验证码')\n        press(ENTER)\n        time.sleep(1)\n        try:\n>           assert eval(data['expected_result'])\nE           assert False\nE            +  where False = eval('Button(\"预约会议\").exists()')\n\ntest_cases\\test_login.py:33: AssertionError"}, "description": "所有参数正确，登陆成功", "parameters": [{"name": "data", "value": "{'name': '所有参数正确，登陆成功', 'params': {'name': 'test1', 'pwd': '123zxc', 'capture': None}, 'case_status': True, 'expected_result': 'Button(\"预约会议\").exists()'}"}], "start": 1608891079050, "stop": 1608891083960, "uuid": "0b4c1433-895c-43b2-b2b6-fbbd1a18cdfa", "historyId": "6ed36e9e192ada6e71e038092733aa9f", "testCaseId": "c1469246359ab4f6b8f59bb9203392dc", "fullName": "test_cases.test_login.TestLogin#test_login", "labels": [{"name": "feature", "value": "登录"}, {"name": "story", "value": "登录页面验证"}, {"name": "tag", "value": "admin"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "ZTXUCHAO1"}, {"name": "thread", "value": "5412-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_login"}]}